{{- if and .Values.sso.enabled .Values.license_key }}
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    "helm.sh/hook": post-install
  name: post-install
spec:
  template:
    metadata:
      creationTimestamp: null
    spec:
      activeDeadlineSeconds: 60
      volumes:
      {{- if .Values.sso.enabled }}
        - name: idp
          configMap:
            name: {{ template "iqserver.fullname" . }}-sso
            items:
            - key: idpmetadata.xml
              path: idpmetadata.xml
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.proxy }}
      {{- end }}
      containers:
      - image: "{{ .Values.job_image.repository }}:{{ .Values.job_image.tag }}"
        imagePullPolicy: {{ .Values.job_image.pullPolicy }}
        name: post-install
        volumeMounts:
          - mountPath: /tmp/
            name: idp
        command:
          - sh
        args:
          - -c
          - |-
            BASE_URL="http://{{ template "iqserver.fullname" . }}.{{ template "iqserver.fullname" . }}-server.svc.cluster.local:{{ .Values.iq.applicationPort }}";
            until curl --head localhost:15000; do echo "Waiting for Sidercar"; sleep 10; done; echo "Sidecar available";
            while [ "$(curl -s "${BASE_URL}/rest/product/license")" == "No valid product license installed." ]; do echo "Waiting for License"; sleep 5; done;
            curl -X PUT \
                -u admin:admin123 \
                "${BASE_URL}/api/v2/config/saml" \
                -F identityProviderXml=@/tmp/idpmetadata.xml \
                -F samlConfiguration='{{ .Values.sso.samlConfiguration | toJson }}';
            curl -fsI -X POST http://localhost:15020/quitquitquit;
            exit
        resources: {}
      restartPolicy: Never
status: {}
{{- end }}
